module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCart {
  count: Int!
}

type AggregateFailedJob {
  count: Int!
}

type AggregateFavorite {
  count: Int!
}

type AggregateMigration {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrdernotif {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateViewnotif {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Cart {
  id: ID!
  createdAt: DateTime!
  email: String!
  mail: String
  productid: String
  updatedAt: DateTime!
  productdetail(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CartConnection {
  pageInfo: PageInfo!
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  email: String!
  mail: String
  productid: String
  productdetail: ProductCreateManyWithoutUserdetailInput
}

input CartCreateManyWithoutProductdetailInput {
  create: [CartCreateWithoutProductdetailInput!]
  connect: [CartWhereUniqueInput!]
}

input CartCreateWithoutProductdetailInput {
  email: String!
  mail: String
  productid: String
}

type CartEdge {
  node: Cart!
  cursor: String!
}

enum CartOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  mail_ASC
  mail_DESC
  productid_ASC
  productid_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CartPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
  mail: String
  productid: String
  updatedAt: DateTime!
}

input CartScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  mail: String
  mail_not: String
  mail_in: [String!]
  mail_not_in: [String!]
  mail_lt: String
  mail_lte: String
  mail_gt: String
  mail_gte: String
  mail_contains: String
  mail_not_contains: String
  mail_starts_with: String
  mail_not_starts_with: String
  mail_ends_with: String
  mail_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartWhereInput
  AND: [CartSubscriptionWhereInput!]
  OR: [CartSubscriptionWhereInput!]
  NOT: [CartSubscriptionWhereInput!]
}

input CartUpdateInput {
  email: String
  mail: String
  productid: String
  productdetail: ProductUpdateManyWithoutUserdetailInput
}

input CartUpdateManyDataInput {
  email: String
  mail: String
  productid: String
}

input CartUpdateManyMutationInput {
  email: String
  mail: String
  productid: String
}

input CartUpdateManyWithoutProductdetailInput {
  create: [CartCreateWithoutProductdetailInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutProductdetailInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutProductdetailInput!]
  deleteMany: [CartScalarWhereInput!]
  updateMany: [CartUpdateManyWithWhereNestedInput!]
}

input CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyDataInput!
}

input CartUpdateWithoutProductdetailDataInput {
  email: String
  mail: String
  productid: String
}

input CartUpdateWithWhereUniqueWithoutProductdetailInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutProductdetailDataInput!
}

input CartUpsertWithWhereUniqueWithoutProductdetailInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutProductdetailDataInput!
  create: CartCreateWithoutProductdetailInput!
}

input CartWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  mail: String
  mail_not: String
  mail_in: [String!]
  mail_not_in: [String!]
  mail_lt: String
  mail_lte: String
  mail_gt: String
  mail_gte: String
  mail_contains: String
  mail_not_contains: String
  mail_starts_with: String
  mail_not_starts_with: String
  mail_ends_with: String
  mail_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  productdetail_every: ProductWhereInput
  productdetail_some: ProductWhereInput
  productdetail_none: ProductWhereInput
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
}

input CartWhereUniqueInput {
  id: ID
  productid: String
}

scalar DateTime

type FailedJob {
  id: ID!
  connection: String!
  exception: String!
  failedAt: DateTime!
  payload: String!
  queue: String!
}

type FailedJobConnection {
  pageInfo: PageInfo!
  edges: [FailedJobEdge]!
  aggregate: AggregateFailedJob!
}

input FailedJobCreateInput {
  connection: String!
  exception: String!
  failedAt: DateTime!
  payload: String!
  queue: String!
}

type FailedJobEdge {
  node: FailedJob!
  cursor: String!
}

enum FailedJobOrderByInput {
  id_ASC
  id_DESC
  connection_ASC
  connection_DESC
  exception_ASC
  exception_DESC
  failedAt_ASC
  failedAt_DESC
  payload_ASC
  payload_DESC
  queue_ASC
  queue_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FailedJobPreviousValues {
  id: ID!
  connection: String!
  exception: String!
  failedAt: DateTime!
  payload: String!
  queue: String!
}

type FailedJobSubscriptionPayload {
  mutation: MutationType!
  node: FailedJob
  updatedFields: [String!]
  previousValues: FailedJobPreviousValues
}

input FailedJobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FailedJobWhereInput
  AND: [FailedJobSubscriptionWhereInput!]
  OR: [FailedJobSubscriptionWhereInput!]
  NOT: [FailedJobSubscriptionWhereInput!]
}

input FailedJobUpdateInput {
  connection: String
  exception: String
  failedAt: DateTime
  payload: String
  queue: String
}

input FailedJobUpdateManyMutationInput {
  connection: String
  exception: String
  failedAt: DateTime
  payload: String
  queue: String
}

input FailedJobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  connection: String
  connection_not: String
  connection_in: [String!]
  connection_not_in: [String!]
  connection_lt: String
  connection_lte: String
  connection_gt: String
  connection_gte: String
  connection_contains: String
  connection_not_contains: String
  connection_starts_with: String
  connection_not_starts_with: String
  connection_ends_with: String
  connection_not_ends_with: String
  exception: String
  exception_not: String
  exception_in: [String!]
  exception_not_in: [String!]
  exception_lt: String
  exception_lte: String
  exception_gt: String
  exception_gte: String
  exception_contains: String
  exception_not_contains: String
  exception_starts_with: String
  exception_not_starts_with: String
  exception_ends_with: String
  exception_not_ends_with: String
  failedAt: DateTime
  failedAt_not: DateTime
  failedAt_in: [DateTime!]
  failedAt_not_in: [DateTime!]
  failedAt_lt: DateTime
  failedAt_lte: DateTime
  failedAt_gt: DateTime
  failedAt_gte: DateTime
  payload: String
  payload_not: String
  payload_in: [String!]
  payload_not_in: [String!]
  payload_lt: String
  payload_lte: String
  payload_gt: String
  payload_gte: String
  payload_contains: String
  payload_not_contains: String
  payload_starts_with: String
  payload_not_starts_with: String
  payload_ends_with: String
  payload_not_ends_with: String
  queue: String
  queue_not: String
  queue_in: [String!]
  queue_not_in: [String!]
  queue_lt: String
  queue_lte: String
  queue_gt: String
  queue_gte: String
  queue_contains: String
  queue_not_contains: String
  queue_starts_with: String
  queue_not_starts_with: String
  queue_ends_with: String
  queue_not_ends_with: String
  AND: [FailedJobWhereInput!]
  OR: [FailedJobWhereInput!]
  NOT: [FailedJobWhereInput!]
}

input FailedJobWhereUniqueInput {
  id: ID
}

type Favorite {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
  owner(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  productdetail(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type FavoriteConnection {
  pageInfo: PageInfo!
  edges: [FavoriteEdge]!
  aggregate: AggregateFavorite!
}

input FavoriteCreateInput {
  email: String
  productid: String
  owner: UserCreateManyWithoutFavsInput
  productdetail: ProductCreateManyInput
}

input FavoriteCreateManyWithoutOwnerInput {
  create: [FavoriteCreateWithoutOwnerInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteCreateWithoutOwnerInput {
  email: String
  productid: String
  productdetail: ProductCreateManyInput
}

type FavoriteEdge {
  node: Favorite!
  cursor: String!
}

enum FavoriteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  productid_ASC
  productid_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FavoritePreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
}

input FavoriteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteScalarWhereInput!]
  OR: [FavoriteScalarWhereInput!]
  NOT: [FavoriteScalarWhereInput!]
}

type FavoriteSubscriptionPayload {
  mutation: MutationType!
  node: Favorite
  updatedFields: [String!]
  previousValues: FavoritePreviousValues
}

input FavoriteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FavoriteWhereInput
  AND: [FavoriteSubscriptionWhereInput!]
  OR: [FavoriteSubscriptionWhereInput!]
  NOT: [FavoriteSubscriptionWhereInput!]
}

input FavoriteUpdateInput {
  email: String
  productid: String
  owner: UserUpdateManyWithoutFavsInput
  productdetail: ProductUpdateManyInput
}

input FavoriteUpdateManyDataInput {
  email: String
  productid: String
}

input FavoriteUpdateManyMutationInput {
  email: String
  productid: String
}

input FavoriteUpdateManyWithoutOwnerInput {
  create: [FavoriteCreateWithoutOwnerInput!]
  delete: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
}

input FavoriteUpdateManyWithWhereNestedInput {
  where: FavoriteScalarWhereInput!
  data: FavoriteUpdateManyDataInput!
}

input FavoriteUpdateWithoutOwnerDataInput {
  email: String
  productid: String
  productdetail: ProductUpdateManyInput
}

input FavoriteUpdateWithWhereUniqueWithoutOwnerInput {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateWithoutOwnerDataInput!
}

input FavoriteUpsertWithWhereUniqueWithoutOwnerInput {
  where: FavoriteWhereUniqueInput!
  update: FavoriteUpdateWithoutOwnerDataInput!
  create: FavoriteCreateWithoutOwnerInput!
}

input FavoriteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner_every: UserWhereInput
  owner_some: UserWhereInput
  owner_none: UserWhereInput
  productdetail_every: ProductWhereInput
  productdetail_some: ProductWhereInput
  productdetail_none: ProductWhereInput
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
}

input FavoriteWhereUniqueInput {
  id: ID
  productid: String
}

scalar Json

scalar Long

type Migration {
  id: ID!
  batch: Int!
  migration: String!
}

type MigrationConnection {
  pageInfo: PageInfo!
  edges: [MigrationEdge]!
  aggregate: AggregateMigration!
}

input MigrationCreateInput {
  batch: Int!
  migration: String!
}

type MigrationEdge {
  node: Migration!
  cursor: String!
}

enum MigrationOrderByInput {
  id_ASC
  id_DESC
  batch_ASC
  batch_DESC
  migration_ASC
  migration_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MigrationPreviousValues {
  id: ID!
  batch: Int!
  migration: String!
}

type MigrationSubscriptionPayload {
  mutation: MutationType!
  node: Migration
  updatedFields: [String!]
  previousValues: MigrationPreviousValues
}

input MigrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MigrationWhereInput
  AND: [MigrationSubscriptionWhereInput!]
  OR: [MigrationSubscriptionWhereInput!]
  NOT: [MigrationSubscriptionWhereInput!]
}

input MigrationUpdateInput {
  batch: Int
  migration: String
}

input MigrationUpdateManyMutationInput {
  batch: Int
  migration: String
}

input MigrationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  batch: Int
  batch_not: Int
  batch_in: [Int!]
  batch_not_in: [Int!]
  batch_lt: Int
  batch_lte: Int
  batch_gt: Int
  batch_gte: Int
  migration: String
  migration_not: String
  migration_in: [String!]
  migration_not_in: [String!]
  migration_lt: String
  migration_lte: String
  migration_gt: String
  migration_gte: String
  migration_contains: String
  migration_not_contains: String
  migration_starts_with: String
  migration_not_starts_with: String
  migration_ends_with: String
  migration_not_ends_with: String
  AND: [MigrationWhereInput!]
  OR: [MigrationWhereInput!]
  NOT: [MigrationWhereInput!]
}

input MigrationWhereUniqueInput {
  id: ID
}

type Mutation {
  createCart(data: CartCreateInput!): Cart!
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateManyCarts(data: CartUpdateManyMutationInput!, where: CartWhereInput): BatchPayload!
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  createFailedJob(data: FailedJobCreateInput!): FailedJob!
  updateFailedJob(data: FailedJobUpdateInput!, where: FailedJobWhereUniqueInput!): FailedJob
  updateManyFailedJobs(data: FailedJobUpdateManyMutationInput!, where: FailedJobWhereInput): BatchPayload!
  upsertFailedJob(where: FailedJobWhereUniqueInput!, create: FailedJobCreateInput!, update: FailedJobUpdateInput!): FailedJob!
  deleteFailedJob(where: FailedJobWhereUniqueInput!): FailedJob
  deleteManyFailedJobs(where: FailedJobWhereInput): BatchPayload!
  createFavorite(data: FavoriteCreateInput!): Favorite!
  updateFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  updateManyFavorites(data: FavoriteUpdateManyMutationInput!, where: FavoriteWhereInput): BatchPayload!
  upsertFavorite(where: FavoriteWhereUniqueInput!, create: FavoriteCreateInput!, update: FavoriteUpdateInput!): Favorite!
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteManyFavorites(where: FavoriteWhereInput): BatchPayload!
  createMigration(data: MigrationCreateInput!): Migration!
  updateMigration(data: MigrationUpdateInput!, where: MigrationWhereUniqueInput!): Migration
  updateManyMigrations(data: MigrationUpdateManyMutationInput!, where: MigrationWhereInput): BatchPayload!
  upsertMigration(where: MigrationWhereUniqueInput!, create: MigrationCreateInput!, update: MigrationUpdateInput!): Migration!
  deleteMigration(where: MigrationWhereUniqueInput!): Migration
  deleteManyMigrations(where: MigrationWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrdernotif(data: OrdernotifCreateInput!): Ordernotif!
  updateOrdernotif(data: OrdernotifUpdateInput!, where: OrdernotifWhereUniqueInput!): Ordernotif
  updateManyOrdernotifs(data: OrdernotifUpdateManyMutationInput!, where: OrdernotifWhereInput): BatchPayload!
  upsertOrdernotif(where: OrdernotifWhereUniqueInput!, create: OrdernotifCreateInput!, update: OrdernotifUpdateInput!): Ordernotif!
  deleteOrdernotif(where: OrdernotifWhereUniqueInput!): Ordernotif
  deleteManyOrdernotifs(where: OrdernotifWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createViewnotif(data: ViewnotifCreateInput!): Viewnotif!
  updateViewnotif(data: ViewnotifUpdateInput!, where: ViewnotifWhereUniqueInput!): Viewnotif
  updateManyViewnotifs(data: ViewnotifUpdateManyMutationInput!, where: ViewnotifWhereInput): BatchPayload!
  upsertViewnotif(where: ViewnotifWhereUniqueInput!, create: ViewnotifCreateInput!, update: ViewnotifUpdateInput!): Viewnotif!
  deleteViewnotif(where: ViewnotifWhereUniqueInput!): Viewnotif
  deleteManyViewnotifs(where: ViewnotifWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  createdAt: DateTime!
  email: String
  feedback: String
  productid: String
  rating: String
  remind: String
  return: String
  status: String
  transid: String
  updatedAt: DateTime!
  owner: User!
  productdetail: Product!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  email: String
  feedback: String
  productid: String
  rating: String
  remind: String
  return: String
  status: String
  transid: String
  owner: UserCreateOneInput!
  productdetail: ProductCreateOneInput!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type Ordernotif {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
  view: String
}

type OrdernotifConnection {
  pageInfo: PageInfo!
  edges: [OrdernotifEdge]!
  aggregate: AggregateOrdernotif!
}

input OrdernotifCreateInput {
  email: String
  productid: String
  view: String
}

type OrdernotifEdge {
  node: Ordernotif!
  cursor: String!
}

enum OrdernotifOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  productid_ASC
  productid_DESC
  updatedAt_ASC
  updatedAt_DESC
  view_ASC
  view_DESC
}

type OrdernotifPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
  view: String
}

type OrdernotifSubscriptionPayload {
  mutation: MutationType!
  node: Ordernotif
  updatedFields: [String!]
  previousValues: OrdernotifPreviousValues
}

input OrdernotifSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrdernotifWhereInput
  AND: [OrdernotifSubscriptionWhereInput!]
  OR: [OrdernotifSubscriptionWhereInput!]
  NOT: [OrdernotifSubscriptionWhereInput!]
}

input OrdernotifUpdateInput {
  email: String
  productid: String
  view: String
}

input OrdernotifUpdateManyMutationInput {
  email: String
  productid: String
  view: String
}

input OrdernotifWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  view: String
  view_not: String
  view_in: [String!]
  view_not_in: [String!]
  view_lt: String
  view_lte: String
  view_gt: String
  view_gte: String
  view_contains: String
  view_not_contains: String
  view_starts_with: String
  view_not_starts_with: String
  view_ends_with: String
  view_not_ends_with: String
  AND: [OrdernotifWhereInput!]
  OR: [OrdernotifWhereInput!]
  NOT: [OrdernotifWhereInput!]
}

input OrdernotifWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  feedback_ASC
  feedback_DESC
  productid_ASC
  productid_DESC
  rating_ASC
  rating_DESC
  remind_ASC
  remind_DESC
  return_ASC
  return_DESC
  status_ASC
  status_DESC
  transid_ASC
  transid_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String
  feedback: String
  productid: String
  rating: String
  remind: String
  return: String
  status: String
  transid: String
  updatedAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  email: String
  feedback: String
  productid: String
  rating: String
  remind: String
  return: String
  status: String
  transid: String
  owner: UserUpdateOneRequiredInput
  productdetail: ProductUpdateOneRequiredInput
}

input OrderUpdateManyMutationInput {
  email: String
  feedback: String
  productid: String
  rating: String
  remind: String
  return: String
  status: String
  transid: String
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  feedback: String
  feedback_not: String
  feedback_in: [String!]
  feedback_not_in: [String!]
  feedback_lt: String
  feedback_lte: String
  feedback_gt: String
  feedback_gte: String
  feedback_contains: String
  feedback_not_contains: String
  feedback_starts_with: String
  feedback_not_starts_with: String
  feedback_ends_with: String
  feedback_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  rating: String
  rating_not: String
  rating_in: [String!]
  rating_not_in: [String!]
  rating_lt: String
  rating_lte: String
  rating_gt: String
  rating_gte: String
  rating_contains: String
  rating_not_contains: String
  rating_starts_with: String
  rating_not_starts_with: String
  rating_ends_with: String
  rating_not_ends_with: String
  remind: String
  remind_not: String
  remind_in: [String!]
  remind_not_in: [String!]
  remind_lt: String
  remind_lte: String
  remind_gt: String
  remind_gte: String
  remind_contains: String
  remind_not_contains: String
  remind_starts_with: String
  remind_not_starts_with: String
  remind_ends_with: String
  remind_not_ends_with: String
  return: String
  return_not: String
  return_in: [String!]
  return_not_in: [String!]
  return_lt: String
  return_lte: String
  return_gt: String
  return_gte: String
  return_contains: String
  return_not_contains: String
  return_starts_with: String
  return_not_starts_with: String
  return_ends_with: String
  return_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  transid: String
  transid_not: String
  transid_in: [String!]
  transid_not_in: [String!]
  transid_lt: String
  transid_lte: String
  transid_gt: String
  transid_gte: String
  transid_contains: String
  transid_not_contains: String
  transid_starts_with: String
  transid_not_starts_with: String
  transid_ends_with: String
  transid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  productdetail: ProductWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  productid: String!
  createdAt: DateTime!
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
  updatedAt: DateTime!
  userdetail(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  productid: String!
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
  userdetail: CartCreateManyWithoutProductdetailInput
}

input ProductCreateManyInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutUserdetailInput {
  create: [ProductCreateWithoutUserdetailInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutUserdetailInput {
  productid: String!
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  productid_ASC
  productid_DESC
  createdAt_ASC
  createdAt_DESC
  desc_ASC
  desc_DESC
  exclusive_ASC
  exclusive_DESC
  image_ASC
  image_DESC
  name_ASC
  name_DESC
  plusprice_ASC
  plusprice_DESC
  price_ASC
  price_DESC
  pricedrop_ASC
  pricedrop_DESC
  return_ASC
  return_DESC
  seller_ASC
  seller_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  productid: String!
  createdAt: DateTime!
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
  updatedAt: DateTime!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  exclusive: String
  exclusive_not: String
  exclusive_in: [String!]
  exclusive_not_in: [String!]
  exclusive_lt: String
  exclusive_lte: String
  exclusive_gt: String
  exclusive_gte: String
  exclusive_contains: String
  exclusive_not_contains: String
  exclusive_starts_with: String
  exclusive_not_starts_with: String
  exclusive_ends_with: String
  exclusive_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  plusprice: String
  plusprice_not: String
  plusprice_in: [String!]
  plusprice_not_in: [String!]
  plusprice_lt: String
  plusprice_lte: String
  plusprice_gt: String
  plusprice_gte: String
  plusprice_contains: String
  plusprice_not_contains: String
  plusprice_starts_with: String
  plusprice_not_starts_with: String
  plusprice_ends_with: String
  plusprice_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  pricedrop: String
  pricedrop_not: String
  pricedrop_in: [String!]
  pricedrop_not_in: [String!]
  pricedrop_lt: String
  pricedrop_lte: String
  pricedrop_gt: String
  pricedrop_gte: String
  pricedrop_contains: String
  pricedrop_not_contains: String
  pricedrop_starts_with: String
  pricedrop_not_starts_with: String
  pricedrop_ends_with: String
  pricedrop_not_ends_with: String
  return: String
  return_not: String
  return_in: [String!]
  return_not_in: [String!]
  return_lt: String
  return_lte: String
  return_gt: String
  return_gte: String
  return_contains: String
  return_not_contains: String
  return_starts_with: String
  return_not_starts_with: String
  return_ends_with: String
  return_not_ends_with: String
  seller: String
  seller_not: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_lt: String
  seller_lte: String
  seller_gt: String
  seller_gte: String
  seller_contains: String
  seller_not_contains: String
  seller_starts_with: String
  seller_not_starts_with: String
  seller_ends_with: String
  seller_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  productid: String
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
  userdetail: CartUpdateManyWithoutProductdetailInput
}

input ProductUpdateInput {
  productid: String
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
  userdetail: CartUpdateManyWithoutProductdetailInput
}

input ProductUpdateManyDataInput {
  productid: String
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
}

input ProductUpdateManyInput {
  create: [ProductCreateInput!]
  update: [ProductUpdateWithWhereUniqueNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueNestedInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyMutationInput {
  productid: String
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
}

input ProductUpdateManyWithoutUserdetailInput {
  create: [ProductCreateWithoutUserdetailInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutUserdetailInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutUserdetailInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutUserdetailDataInput {
  productid: String
  desc: String
  exclusive: String
  image: String
  name: String
  plusprice: String
  price: String
  pricedrop: String
  return: String
  seller: String
}

input ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateDataInput!
}

input ProductUpdateWithWhereUniqueWithoutUserdetailInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutUserdetailDataInput!
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductUpsertWithWhereUniqueWithoutUserdetailInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutUserdetailDataInput!
  create: ProductCreateWithoutUserdetailInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  exclusive: String
  exclusive_not: String
  exclusive_in: [String!]
  exclusive_not_in: [String!]
  exclusive_lt: String
  exclusive_lte: String
  exclusive_gt: String
  exclusive_gte: String
  exclusive_contains: String
  exclusive_not_contains: String
  exclusive_starts_with: String
  exclusive_not_starts_with: String
  exclusive_ends_with: String
  exclusive_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  plusprice: String
  plusprice_not: String
  plusprice_in: [String!]
  plusprice_not_in: [String!]
  plusprice_lt: String
  plusprice_lte: String
  plusprice_gt: String
  plusprice_gte: String
  plusprice_contains: String
  plusprice_not_contains: String
  plusprice_starts_with: String
  plusprice_not_starts_with: String
  plusprice_ends_with: String
  plusprice_not_ends_with: String
  price: String
  price_not: String
  price_in: [String!]
  price_not_in: [String!]
  price_lt: String
  price_lte: String
  price_gt: String
  price_gte: String
  price_contains: String
  price_not_contains: String
  price_starts_with: String
  price_not_starts_with: String
  price_ends_with: String
  price_not_ends_with: String
  pricedrop: String
  pricedrop_not: String
  pricedrop_in: [String!]
  pricedrop_not_in: [String!]
  pricedrop_lt: String
  pricedrop_lte: String
  pricedrop_gt: String
  pricedrop_gte: String
  pricedrop_contains: String
  pricedrop_not_contains: String
  pricedrop_starts_with: String
  pricedrop_not_starts_with: String
  pricedrop_ends_with: String
  pricedrop_not_ends_with: String
  return: String
  return_not: String
  return_in: [String!]
  return_not_in: [String!]
  return_lt: String
  return_lte: String
  return_gt: String
  return_gte: String
  return_contains: String
  return_not_contains: String
  return_starts_with: String
  return_not_starts_with: String
  return_ends_with: String
  return_not_ends_with: String
  seller: String
  seller_not: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_lt: String
  seller_lte: String
  seller_gt: String
  seller_gte: String
  seller_contains: String
  seller_not_contains: String
  seller_starts_with: String
  seller_not_starts_with: String
  seller_ends_with: String
  seller_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userdetail_every: CartWhereInput
  userdetail_some: CartWhereInput
  userdetail_none: CartWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  productid: String
}

type Project {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  updatedAt: DateTime!
  userId: Int!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  description: String!
  name: String!
  userId: Int!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  updatedAt: DateTime!
  userId: Int!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  description: String
  name: String
  userId: Int
}

input ProjectUpdateManyMutationInput {
  description: String
  name: String
  userId: Int
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  failedJob(where: FailedJobWhereUniqueInput!): FailedJob
  failedJobs(where: FailedJobWhereInput, orderBy: FailedJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FailedJob]!
  failedJobsConnection(where: FailedJobWhereInput, orderBy: FailedJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FailedJobConnection!
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favorites(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite]!
  favoritesConnection(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteConnection!
  migration(where: MigrationWhereUniqueInput!): Migration
  migrations(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Migration]!
  migrationsConnection(where: MigrationWhereInput, orderBy: MigrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MigrationConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  ordernotif(where: OrdernotifWhereUniqueInput!): Ordernotif
  ordernotifs(where: OrdernotifWhereInput, orderBy: OrdernotifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ordernotif]!
  ordernotifsConnection(where: OrdernotifWhereInput, orderBy: OrdernotifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrdernotifConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  viewnotif(where: ViewnotifWhereUniqueInput!): Viewnotif
  viewnotifs(where: ViewnotifWhereInput, orderBy: ViewnotifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Viewnotif]!
  viewnotifsConnection(where: ViewnotifWhereInput, orderBy: ViewnotifOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewnotifConnection!
  node(id: ID!): Node
}

type Subscription {
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  failedJob(where: FailedJobSubscriptionWhereInput): FailedJobSubscriptionPayload
  favorite(where: FavoriteSubscriptionWhereInput): FavoriteSubscriptionPayload
  migration(where: MigrationSubscriptionWhereInput): MigrationSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  ordernotif(where: OrdernotifSubscriptionWhereInput): OrdernotifSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  viewnotif(where: ViewnotifSubscriptionWhereInput): ViewnotifSubscriptionPayload
}

type Token {
  refresh: ID!
  access: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  refresh: ID!
  access: String
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  refresh_ASC
  refresh_DESC
  access_ASC
  access_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  id_ASC
  id_DESC
}

type TokenPreviousValues {
  refresh: ID!
  access: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
  OR: [TokenSubscriptionWhereInput!]
  NOT: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  refresh: ID
  access: String
}

input TokenUpdateManyMutationInput {
  refresh: ID
  access: String
}

input TokenWhereInput {
  refresh: ID
  refresh_not: ID
  refresh_in: [ID!]
  refresh_not_in: [ID!]
  refresh_lt: ID
  refresh_lte: ID
  refresh_gt: ID
  refresh_gte: ID
  refresh_contains: ID
  refresh_not_contains: ID
  refresh_starts_with: ID
  refresh_not_starts_with: ID
  refresh_ends_with: ID
  refresh_not_ends_with: ID
  access: String
  access_not: String
  access_in: [String!]
  access_not_in: [String!]
  access_lt: String
  access_lte: String
  access_gt: String
  access_gte: String
  access_contains: String
  access_not_contains: String
  access_starts_with: String
  access_not_starts_with: String
  access_ends_with: String
  access_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  refresh: ID
}

type User {
  id: ID!
  email: String
  address: String
  createdAt: DateTime!
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
  updatedAt: DateTime!
  favs(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
  favs: FavoriteCreateManyWithoutOwnerInput
}

input UserCreateManyWithoutFavsInput {
  create: [UserCreateWithoutFavsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFavsInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  address_ASC
  address_DESC
  createdAt_ASC
  createdAt_DESC
  favorites_ASC
  favorites_DESC
  isadmin_ASC
  isadmin_DESC
  issuper_ASC
  issuper_DESC
  items_ASC
  items_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  password_ASC
  password_DESC
  payment_ASC
  payment_DESC
  phone_ASC
  phone_DESC
  plus_ASC
  plus_DESC
  reqadmin_ASC
  reqadmin_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  address: String
  createdAt: DateTime!
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isadmin: String
  isadmin_not: String
  isadmin_in: [String!]
  isadmin_not_in: [String!]
  isadmin_lt: String
  isadmin_lte: String
  isadmin_gt: String
  isadmin_gte: String
  isadmin_contains: String
  isadmin_not_contains: String
  isadmin_starts_with: String
  isadmin_not_starts_with: String
  isadmin_ends_with: String
  isadmin_not_ends_with: String
  issuper: String
  issuper_not: String
  issuper_in: [String!]
  issuper_not_in: [String!]
  issuper_lt: String
  issuper_lte: String
  issuper_gt: String
  issuper_gte: String
  issuper_contains: String
  issuper_not_contains: String
  issuper_starts_with: String
  issuper_not_starts_with: String
  issuper_ends_with: String
  issuper_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: String
  number_not: String
  number_in: [String!]
  number_not_in: [String!]
  number_lt: String
  number_lte: String
  number_gt: String
  number_gte: String
  number_contains: String
  number_not_contains: String
  number_starts_with: String
  number_not_starts_with: String
  number_ends_with: String
  number_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  payment: String
  payment_not: String
  payment_in: [String!]
  payment_not_in: [String!]
  payment_lt: String
  payment_lte: String
  payment_gt: String
  payment_gte: String
  payment_contains: String
  payment_not_contains: String
  payment_starts_with: String
  payment_not_starts_with: String
  payment_ends_with: String
  payment_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  plus: String
  plus_not: String
  plus_in: [String!]
  plus_not_in: [String!]
  plus_lt: String
  plus_lte: String
  plus_gt: String
  plus_gte: String
  plus_contains: String
  plus_not_contains: String
  plus_starts_with: String
  plus_not_starts_with: String
  plus_ends_with: String
  plus_not_ends_with: String
  reqadmin: String
  reqadmin_not: String
  reqadmin_in: [String!]
  reqadmin_not_in: [String!]
  reqadmin_lt: String
  reqadmin_lte: String
  reqadmin_gt: String
  reqadmin_gte: String
  reqadmin_contains: String
  reqadmin_not_contains: String
  reqadmin_starts_with: String
  reqadmin_not_starts_with: String
  reqadmin_ends_with: String
  reqadmin_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
  favs: FavoriteUpdateManyWithoutOwnerInput
}

input UserUpdateInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
  favs: FavoriteUpdateManyWithoutOwnerInput
}

input UserUpdateManyDataInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
}

input UserUpdateManyMutationInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
}

input UserUpdateManyWithoutFavsInput {
  create: [UserCreateWithoutFavsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFavsDataInput {
  email: String
  address: String
  favorites: Json
  isadmin: String
  issuper: String
  items: Json
  name: String
  number: String
  password: String
  payment: String
  phone: String
  plus: String
  reqadmin: String
}

input UserUpdateWithWhereUniqueWithoutFavsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutFavsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavsDataInput!
  create: UserCreateWithoutFavsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isadmin: String
  isadmin_not: String
  isadmin_in: [String!]
  isadmin_not_in: [String!]
  isadmin_lt: String
  isadmin_lte: String
  isadmin_gt: String
  isadmin_gte: String
  isadmin_contains: String
  isadmin_not_contains: String
  isadmin_starts_with: String
  isadmin_not_starts_with: String
  isadmin_ends_with: String
  isadmin_not_ends_with: String
  issuper: String
  issuper_not: String
  issuper_in: [String!]
  issuper_not_in: [String!]
  issuper_lt: String
  issuper_lte: String
  issuper_gt: String
  issuper_gte: String
  issuper_contains: String
  issuper_not_contains: String
  issuper_starts_with: String
  issuper_not_starts_with: String
  issuper_ends_with: String
  issuper_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: String
  number_not: String
  number_in: [String!]
  number_not_in: [String!]
  number_lt: String
  number_lte: String
  number_gt: String
  number_gte: String
  number_contains: String
  number_not_contains: String
  number_starts_with: String
  number_not_starts_with: String
  number_ends_with: String
  number_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  payment: String
  payment_not: String
  payment_in: [String!]
  payment_not_in: [String!]
  payment_lt: String
  payment_lte: String
  payment_gt: String
  payment_gte: String
  payment_contains: String
  payment_not_contains: String
  payment_starts_with: String
  payment_not_starts_with: String
  payment_ends_with: String
  payment_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  plus: String
  plus_not: String
  plus_in: [String!]
  plus_not_in: [String!]
  plus_lt: String
  plus_lte: String
  plus_gt: String
  plus_gte: String
  plus_contains: String
  plus_not_contains: String
  plus_starts_with: String
  plus_not_starts_with: String
  plus_ends_with: String
  plus_not_ends_with: String
  reqadmin: String
  reqadmin_not: String
  reqadmin_in: [String!]
  reqadmin_not_in: [String!]
  reqadmin_lt: String
  reqadmin_lte: String
  reqadmin_gt: String
  reqadmin_gte: String
  reqadmin_contains: String
  reqadmin_not_contains: String
  reqadmin_starts_with: String
  reqadmin_not_starts_with: String
  reqadmin_ends_with: String
  reqadmin_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  favs_every: FavoriteWhereInput
  favs_some: FavoriteWhereInput
  favs_none: FavoriteWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Viewnotif {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
}

type ViewnotifConnection {
  pageInfo: PageInfo!
  edges: [ViewnotifEdge]!
  aggregate: AggregateViewnotif!
}

input ViewnotifCreateInput {
  email: String
  productid: String
}

type ViewnotifEdge {
  node: Viewnotif!
  cursor: String!
}

enum ViewnotifOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  productid_ASC
  productid_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ViewnotifPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String
  productid: String
  updatedAt: DateTime!
}

type ViewnotifSubscriptionPayload {
  mutation: MutationType!
  node: Viewnotif
  updatedFields: [String!]
  previousValues: ViewnotifPreviousValues
}

input ViewnotifSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewnotifWhereInput
  AND: [ViewnotifSubscriptionWhereInput!]
  OR: [ViewnotifSubscriptionWhereInput!]
  NOT: [ViewnotifSubscriptionWhereInput!]
}

input ViewnotifUpdateInput {
  email: String
  productid: String
}

input ViewnotifUpdateManyMutationInput {
  email: String
  productid: String
}

input ViewnotifWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  productid: String
  productid_not: String
  productid_in: [String!]
  productid_not_in: [String!]
  productid_lt: String
  productid_lte: String
  productid_gt: String
  productid_gte: String
  productid_contains: String
  productid_not_contains: String
  productid_starts_with: String
  productid_not_starts_with: String
  productid_ends_with: String
  productid_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ViewnotifWhereInput!]
  OR: [ViewnotifWhereInput!]
  NOT: [ViewnotifWhereInput!]
}

input ViewnotifWhereUniqueInput {
  id: ID
}
`
      }
    